def fib : Nat → Nat
  | 0 => 0
  | 1 => 1
  | n + 2 => fib n + fib (n + 1)

example : fib 0 = 0 := rfl
example : fib 1 = 1 := rfl
theorem foo (n) : fib (n + 2) = fib n + fib (n + 1) := rfl

def ack_sm (ack_m : Nat → Nat) : Nat → Nat
  | 0 => ack_m 1
  | n + 1 => ack_m (ack_sm ack_m n)

def ack : Nat → Nat → Nat
  | 0 => Nat.succ
  | m + 1 => ack_sm (ack m)

example (n) : ack 0 n = n + 1 := rfl
example (m) : ack (m + 1) 0 = ack m 1 := rfl
example (m n) : ack (m + 1) (n + 1) = ack m (ack (m + 1) n) := rfl

def ack' : ℕ → ℕ → ℕ :=
Nat.rec (λ n => n + 1) $ λ m ack_m =>
  Nat.rec (ack_m 1) $ λ n ack_sm_n =>
    ack_m ack_sm_n
