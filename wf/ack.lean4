def ack : Nat → Nat → Nat
  | 0, n => n + 1
  | m + 1, 0 => ack m 1
  | m + 1, n + 1 => ack m (ack (m + 1) n)
termination_by _ m n => (m, n)

def ack' : Nat × Nat → Nat
  | (0, n) => n + 1
  | (m + 1, 0) => ack' (m, 1)
  | (m + 1, n + 1) => ack' (m, ack' (m + 1, n))
termination_by _ mn => mn

example : ack 0 0 = 0 := rfl
